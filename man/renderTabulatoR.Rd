% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/render.R
\name{renderTabulatoR}
\alias{renderTabulatoR}
\title{Render a Tabulator Table in Shiny}
\usage{
renderTabulatoR(
  expr,
  columns = c(),
  layout = "fitColumns",
  autoColumns = TRUE,
  editable = TRUE,
  events = NULL,
  ...,
  .opts = list(),
  env = parent.frame(),
  quoted = FALSE
)
}
\arguments{
\item{expr}{A reactive expression that returns a \code{data.frame}.}

\item{columns}{An array (i.e., \code{c(...)}) of column definitions for Tabulator. Each element must
be a list representing a column config (e.g., \code{list(field = "name", editable = TRUE)}).
This ensures JSON serializes correctly as an array, not a named list. See
\url{https://tabulator.info/docs/6.3/columns} for full details.}

\item{layout}{a string defining the overall table layout. https://tabulator.info/docs/6.3/layout#layout}

\item{autoColumns}{Logical. If \code{TRUE}, columns will be auto-generated from the data.
Set to \code{FALSE} if you're supplying a custom column definitions.}

\item{editable}{Logical. If \code{TRUE}, the cells can be editable. Pair with editor=<editgor_type> when not using autocolumns.}

\item{events}{A named list of JS events that should be sent back to Shiny as input values.}

\item{...}{Additional named elements to include in the payload passed to the front-end.}

\item{.opts}{A named list of additional payload entries, useful for programmatic inclusion.
Elements in \code{...} will override matching keys in \code{.opts}.}

\item{env}{The environment in which to evaluate \code{expr}.}

\item{quoted}{Logical. Is \code{expr} already quoted? If not, it will be quoted.}

\item{options}{A named list of additional Tabulator options (e.g. pagination, layout).}
}
\value{
A function that returns a list to be serialized and passed to the Tabulator output binding.
}
\description{
Creates a reactive Tabulator table widget for use in Shiny applications.
Returns a function that outputs a JSON-serializable payload consumed by the
custom tabulatoR JavaScript output binding.
}
\details{
JavaScript callbacks (such as \code{cellClick} or \code{formatter}) must be wrapped using \code{js()}
from this package to be interpreted as executable functions in the browser.
}
